<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.3">
  <POU Name="MAIN_Motoransteuerung" Id="{16a347dc-587d-4819-9a09-e734dabd6320}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN_Motoransteuerung
VAR	
	//Zustandsautomat
	state:		EnumState:=EnumState.init;
	nextState:	EnumState:=EnumState.init;

	//Achsen Freischalten
	enableMotors: BOOL	:=0;

	//Umgerechnete Werte
	vX:		LREAL:=0;
	vY:		LREAL:=0;
	vTheta:	LREAL:=0;
	v1:		LREAL:=0;
	v2:		LREAL:=0;
	v3:		LREAL:=0;
	//Fahrrichtung Motor
	velocityMotor1 :LREAL:=0;
	velocityMotor2 :LREAL:=0;
	velocityMotor3 :LREAL:=0;
	
	//Skalierung auf MaxGeschwindigkeit Skalierung hängt mit CoE Register 8020:07 8020:08 zusammen !!!
	velocityMax:LREAL:=942.4777961;// Nenndrehzahl U/min CoE Register 8020:07 8020:08 fesgelegt Faktor 16 Wegen Getriebe 1:16
	velocityMotorsTf:LREAL:=0;
	
	// Skalierung auf Ansteuersignale LREAL=>WORD   Skalierung hängt mit CoE Register 8020:07 8020:08 zusammen !!!
	skalPos:LREAL:=34.7668668;//  MaxValue/MaxVelocity   [1/ mm/s]   32767/(942mm/s)   MaxVelocity=D*PI*n/(16*60) //16:1 Getriebeübersetzung  
	skalNeg:LREAL:=34.76792783;//  MaxVelau/MaxVelocity   [1/ mm/s]   32768/(942mm/s)   MaxVelocity=(80mm*PI*3600 U/min)/(16*60sec/min)
	
	//Inputs: CartesianToMotors + Bumper
	vXCartesianToMotors 	AT%I*:LREAL:=0;
	vYCartesianToMotors 	AT%I*:LREAL:=0;
	vThetaCartesianToMotors AT%I*:LREAL:=0;
	bumper	   AT%I*: BOOL:=0;
	
	//Outputs: Motor Values and Enable Signal
	enableToMotor1 AT%Q*:BOOL:=FALSE;
	enableToMotor2 AT%Q*:BOOL:=FALSE;
	enableToMotor3 AT%Q*:BOOL:=FALSE;
	
	velocityToMotor1 AT%Q*:INT:=0;
	velocityToMotor3 AT%Q*:INT:=0;
	velocityToMotor2 AT%Q*:INT:=0;
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Konverzierung ToMotors Anfang********************************************************

//	  conversion from positive and / or negative longitudinal, lateral and
//	  rotational velocities(in milimeters per second) to three separate
//	  positive motor velocities(resolution: 1Byte) and their rotation
//    direction
//inputs:  	velocityX  (longitudinal velocity in milimeters per second)
//         	velocityY  (lateral velocity in milimeters per second)
//			vtheta     (rotational velocity in milimeters per second)
//outputs : velocityToMotor1	
//			velocityToMotor2
//			velocityToMotor3
//conversion from longitudinal, lateral & rotational velocity to the
//three separate motor velocities
vX:=vXCartesianToMotors;
vY:=vYCartesianToMotors;
vTheta:=vThetaCartesianToMotors;

v1 := (-vX * COS(30.0*PI/180))	+ (vY * COS(60.0*PI/180))	+ (vTheta * 135.0);
v2 := 0.0						+ (-vY)						+ (vTheta * 135.0);
v3 := (vX * COS(30.0*PI/180))	+ (vY * COS(60.0*PI/180))	+ (vTheta * 135.0);
	
//Drehrichtung Umkehren
velocityMotor1:=-v1;
velocityMotor2:=-v2;
velocityMotor3:=-v3;

//Geschwindigkeitsbegrenzung
IF velocityMotor1 > velocityMax THEN
    velocityMotorsTf:= velocityMotor1;
    
    velocityMotor1:= velocityMax;
    velocityMotor2:= velocityMax * velocityMotor2 / velocityMotorsTf;
    velocityMotor3:= velocityMax * velocityMotor3 / velocityMotorsTf;
END_IF

IF velocityMotor2 > velocityMax THEN
    velocityMotorsTf:= velocityToMotor2;
    
    velocityMotor1:= velocityMax * velocityToMotor1 / velocityMotorsTf;
    velocityMotor2:= velocityMax;
    velocityMotor3:= velocityMax * velocityToMotor3 / velocityMotorsTf;
END_IF

IF velocityMotor3 > velocityMax THEN
    velocityMotorsTf:= velocityToMotor3;
    
    velocityMotor1:= velocityMax * velocityMotor1 / velocityMotorsTf;
    velocityMotor2:= velocityMax * velocityMotor2 / velocityMotorsTf;
    velocityMotor3:= velocityMax;
END_IF
// Konverzierung ToMotors ENDE********************************************************


//MOTORANSTEUERUNG Zustandsautomat

CASE state OF
	EnumState.init:						
						IF bumper=TRUE THEN
							nextState:=EnumState.reset;
							ELSE
								nextState:=EnumState.drive;
						END_IF
	EnumState.drive:
						IF velocityMotor1>=0 THEN
							velocityToMotor1:=LREAL_TO_INT(velocityMotor1*skalPos);
						ELSE
							velocityToMotor1:=LREAL_TO_INT(velocityMotor1*skalNeg);
						END_IF
						
						IF velocityMotor2>=0 THEN
							velocityToMotor2:=LREAL_TO_INT(velocityMotor2*skalPos);
						ELSE
							velocityToMotor2:=LREAL_TO_INT(velocityMotor2*skalNeg);
						END_IF
						
						IF velocityMotor3>=0 THEN
							velocityToMotor3:=LREAL_TO_INT(velocityMotor3*skalPos);
						ELSE
							velocityToMotor3:=LREAL_TO_INT(velocityMotor3*skalNeg); 
						END_IF
							
							enableToMotor1:=1;
							enableToMotor2:=1;
							enableToMotor3:=1;
							
						IF bumper=TRUE THEN
							nextState:=EnumState.reset;
						END_IF
	EnumState.reset:
						velocityToMotor1:=0;
						velocityToMotor2:=0;
						velocityToMotor3:=0;
						enableToMotor1:=0;
						enableToMotor2:=0;
						enableToMotor3:=0;
	ELSE
		nextState:=EnumState.reset;
END_CASE
state:=nextState;]]></ST>
    </Implementation>
    <LineIds Name="MAIN_Motoransteuerung">
      <LineId Id="724" Count="0" />
      <LineId Id="643" Count="4" />
      <LineId Id="649" Count="2" />
      <LineId Id="653" Count="2" />
      <LineId Id="662" Count="1" />
      <LineId Id="940" Count="0" />
      <LineId Id="942" Count="1" />
      <LineId Id="688" Count="4" />
      <LineId Id="1069" Count="0" />
      <LineId Id="893" Count="0" />
      <LineId Id="1067" Count="1" />
      <LineId Id="1135" Count="0" />
      <LineId Id="897" Count="7" />
      <LineId Id="924" Count="6" />
      <LineId Id="905" Count="0" />
      <LineId Id="932" Count="6" />
      <LineId Id="931" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="1107" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="1183" Count="0" />
      <LineId Id="1182" Count="0" />
      <LineId Id="1184" Count="0" />
      <LineId Id="1193" Count="1" />
      <LineId Id="1256" Count="1" />
      <LineId Id="1195" Count="0" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1234" Count="19" />
      <LineId Id="1233" Count="0" />
      <LineId Id="1254" Count="0" />
      <LineId Id="1196" Count="1" />
      <LineId Id="1192" Count="0" />
      <LineId Id="1188" Count="0" />
      <LineId Id="1202" Count="4" />
      <LineId Id="1201" Count="0" />
      <LineId Id="1199" Count="1" />
      <LineId Id="1185" Count="0" />
      <LineId Id="1258" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>